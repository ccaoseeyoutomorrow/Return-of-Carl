#include<iostream>
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<cmath>

double static pi = acos(-1.0);//给pi赋值
int n1, n2, n3, n4, ca = 0;//所用的全局变量
const double length = 5 * sqrt(2.);//存放边长,都为5根号2

struct TPoint
{
	double x, y, z;
	void get(double a, double b, double c)
	{
		x = a; y = b; z = c;
	}
}; TPoint A, B; TPoint top[6];//A,B为两个点的信息，top[5]为上面加上xy四个顶点的信息


void init() {
	top[0].get(0, 0, length);
	top[1].get(length, 0, 0);
	top[2].get(0, length, 0);
	top[3].get(-length, 0, 0);
	top[4].get(0, -length, 0);
	top[5].get(0, 0, -length);
}

//将极坐标转换为xyz坐标，A的x度数一定小于B
void initialTPoint() {
	double l2, r;//所用的局部变量
	//给A赋值,弧度=度数/180*pi
	double nt1 = n1 / 180. * pi, nt2 = (n2 % 90) / 180. * pi;
	if (n2 == 90)
		nt2 = 90 / 180. * pi;
	else if (n2 == 180)
		nt2 = pi;
	else if (n2 > 90)
		nt2 = (90 - (double)(n2 % 90)) / 180. * pi;
	//length=xcosθ+√3/3*xsinθ(θ=n1 % 90),x为点到xy轴的长度,换算成x=√3/2*length/sin(θ+60°)或者直接构建一个三角形，带出
	//5√2rsinB+xrcosB=5√2x（B=φ%90），r=5√2*x/(5√2sinB+xcosB)
	double testr, testx, testx2, testr2;
	//testx = sqrt(3.) / 2 * length / sin((60 + n1) / 180. * pi);
	testx = 5. / sin(((double)(n1 % 90) + 45) / 180. * pi);
	testr = length * testx / (length * sin(nt2) + testx * cos(nt2));
	//l2 = length / (sin(aa) + cos(aa));
	//r = l2 * length / (length * sin(nt2) + l2 * cos(nt2));

	A.x = testr * sin(nt2) * cos(nt1);
	A.y = testr * sin(nt2) * sin(nt1);
	A.z = testr * cos(n2/180.*pi);
	//给B赋值
	double nt3 = n3 / 180. * pi, nt4 = (n4 % 90) / 180. * pi;;
	testx2 = 5. / sin(((double)(n3 % 90) + 45) / 180. * pi);
	if (n4 == 180)
		nt4 = pi;
	else if (n4 > 90)
		nt4 = (90 - (double)(n4 % 90)) / 180. * pi;
	else if (n4 == 90)
		nt4 = n4  / 180. * pi;
	testr2 = length * testx2 / (length * sin(nt4) + testx2 * cos(nt4));
	B.x = testr2 * sin(nt4) * cos(nt3);
	B.y = testr2 * sin(nt4) * sin(nt3);
	if (n4 == 180)
		B.z = -length;
	else
		B.z = testr2 * cos(n4 / 180. * pi);
}

int last(int temp) {
	if (temp == 1)
		return 4;
	else
		return (temp - 1);
}

int next(int temp) {
	if (temp == 4)
		return 1;
	else
		return (temp + 1);
}
//在同一面
double redis(TPoint A, TPoint B) {
	return sqrt((A.x - B.x) * (A.x - B.x) + (A.y - B.y) * (A.y - B.y) + (A.z - B.z) * (A.z - B.z));
}



//判断从C到D最少要经过几个面
int planedis(TPoint C, TPoint D) {
	int dis = 0;
	if (!((C.x >= 0 && D.x >= 0) || (C.x <= 0 && D.x <= 0)))
		dis++;
	if (!((C.y >= 0 && D.y >= 0) || (C.y <= 0 && D.y <= 0)))
		dis++;
	if (!((C.z >= 0 && D.z >= 0) || (C.z <= 0 && D.z <= 0)))
		dis++;
	return dis;
}

double redis(TPoint C, TPoint D, TPoint E, TPoint F, TPoint G, TPoint H) {
	double d1, d2, d3, d4, d5, radian1, radian2, radian3, distance;
	TPoint t1, t2, t3, t4;
	if (planedis(C, E) == 0) {
		t1 = C;
		t2 = D;
	}
	else if (planedis(D, E) == 0) {
		t1 = D;
		t2 = C;
	}
	else
		return 100;
	d1 = redis(t1, E);
	d2 = redis(t1, F);
	d4 = redis(t2, H);
	d5 = redis(t2, G);
	radian1 = acos((d1 * d1 + 100 - d2 * d2) / (20 * d1));
	radian3 = acos((d4 * d4 + 100 - d5 * d5) / (20 * d4));
	d3 = sqrt(d4 * d4 + 100 - 20 * d4 * cos(radian3 + pi / 3.));
	radian2 = acos((d3 * d3 + 100 - d4 * d4) / (20 * d3));
	distance = sqrt(d3 * d3 + d1 * d1 - 2 * d1 * d3 * cos(radian1 + radian2 + pi / 3.));
	return distance;
}

//都在上面并且隔了一面
double redis1()
{
	int p = last((int)((double)(n3 - 0.001) / 90) + 2);
	if (n1 == 0 && n3 > 180)
		p = 4;
	double d1, d2, d3, d4, temp1, temp2, temp;
	double radian1, radian2;
	d1 = redis(A, top[0]);
	d2 = redis(A, top[p]);
	d3 = redis(B, top[0]);
	d4 = redis(B, top[p]);
	temp1 = (d1 * d1 + 100 - d2 * d2) / (2 * d1 * 10);
	temp2 = (d3 * d3 + 100 - d4 * d4) / (2 * d3 * 10);
	radian1 = acos(temp1);
	radian2 = acos(temp2);
	temp = sqrt(d1 * d1 + d3 * d3 - 2 * d1 * d3 * cos(radian1 + radian2));
	return temp;
}

//都在上面并且隔了两面即对面
double redis2() {
	double d1, d2, d3, d4, temp;
	double radian1, radian2;
	if (n1 % 90 == 0) {
		d1 = redis(A, top[0]);
		radian1 = pi / 3.;
	}
	else {
		d1 = redis(A, top[0]);
		d2 = redis(A, top[n1 / 90 + 2]);
		temp = (d1 * d1 + 100 - d2 * d2) / (2 * d1 * 10);
		radian1 = acos(temp);
	}

	if (n3 % 90 == 0) {
		d3 = redis(B, top[0]);
		radian2 = pi / 3.;
	}
	else {
		d3 = redis(B, top[0]);
		d4 = redis(B, top[n3 / 90 + 1]);
		temp = (d3 * d3 + 100 - d4 * d4) / (2 * d3 * 10);
		radian2 = acos(temp);
	}
	if ((radian1 + radian2) > acos(0.5)) {
		temp = sqrt(d1 * d1 + d3 * d3 - 2 * d1 * d3 * cos(pi - radian1 - radian2));
	}
	else {
		temp = sqrt(d1 * d1 + d3 * d3 - 2 * d1 * d3 * cos(radian1 + radian2 + pi / 3.));
	}
	return temp;
}

//分别在上面和下面，隔了一面
double redis3() {
	double d1, d2, d3, d4;
	double radian1, radian2, temp;
	int p;
	if (n4 == 180 && n2 != 0)
		p = (int)((double)(n1 + 0.001) / 90) + 1;
	else if (n2 == 0 && n4 != 180)
		p = (int)((double)(n3 - 0.001) / 90) + 1;
	else if (n2 == 0 && n4 == 180)
		p = 1;
	else
		p = (int)((double)(n3 - 0.001) / 90) + 1;
	//求radian1
	d1 = redis(A, top[p]);
	d2 = redis(A, top[next(p)]);
	temp = (d1 * d1 + 100 - d2 * d2) / (2 * d1 * 10);
	radian1 = acos(temp);
	//求radian2
	d3 = redis(B, top[p]);
	d4 = redis(B, top[next(p)]);
	temp = (d3 * d3 + 100 - d4 * d4) / (2 * d3 * 10);
	radian2 = acos(temp);
	temp = sqrt(d1 * d1 + d3 * d3 - 2 * d1 * d3 * cos(radian1 + radian2));
	return temp;
}

//分别在上面和下面，隔了两面
double redis4() {
	double d1, d2, d3, d4;
	double radian1, radian2, temp;
	int p, p2;
	if (n4 == 180 && n2 != 0)
		p = (int)((double)(n1 + 0.001) / 90) + 1;
	else if (n2 == 0 && n4 != 180)
		p = (int)((double)(n3 - 0.001) / 90) + 1;
	else if (n1 == 0 && n3 > 180) {
		p = 4;
		//求radian1
		d2 = redis(A, top[0]);
		d1 = redis(A, top[p]);
		temp = (d1 * d1 + 100 - d2 * d2) / (2 * d1 * 10);
		radian1 = acos(temp);
		//求radian2
		d3 = redis(B, top[p]);
		d4 = redis(B, top[last(p)]);
		temp = (d3 * d3 + 100 - d4 * d4) / (2 * d3 * 10);
		radian2 = acos(temp);
		if ((radian1 + radian2) > (acos(0.5) + 0.0001)) {
			temp = sqrt(d1 * d1 + d3 * d3 - 2 * d1 * d3 * cos(pi - radian1 - radian2));
		}
		else {
			temp = sqrt(d1 * d1 + d3 * d3 - 2 * d1 * d3 * cos(radian1 + radian2 + pi / 3.));
		}
		return temp;
	}
	else
		p = 2;

	if (n2 > 90 && n4 < 90)
		p2 = 5;
	else
		p2 = 0;
	//求radian1
	d2 = redis(A, top[p2]);
	d1 = redis(A, top[p]);
	temp = (d1 * d1 + 100 - d2 * d2) / (2 * d1 * 10);
	radian1 = acos(temp);
	//求radian2
	d3 = redis(B, top[p]);
	d4 = redis(B, top[next(p)]);
	temp = (d3 * d3 + 100 - d4 * d4) / (2 * d3 * 10);
	radian2 = acos(temp);
	if ((radian1 + radian2) > (acos(0.5) + 0.0001)) {
		temp = sqrt(d1 * d1 + d3 * d3 - 2 * d1 * d3 * cos(pi - radian1 - radian2));
	}
	else {
		temp = sqrt(d1 * d1 + d3 * d3 - 2 * d1 * d3 * cos(radian1 + radian2 + pi / 3.));
	}
	return temp;
}

//分别在上面和下面，隔了三面
double redis5() {
	double  dis = 100;
	//让B在第5、6、7、8象限
	if (180 > n2&& n2 > 90) {
		int temp1 = n2;
		n2 = n4;
		n4 = temp1;

		temp1 = n1;
		n1 = n3;
		n3 = temp1;
		initialTPoint();
	}
	//保证A的xy度数和z的度数都最小
	if (n2 > 90) {
		int tempt = n2;
		n2 = n4;
		n4 = tempt;
		initialTPoint();
	}
	//把A放到第一象限去
	if (n1 > 90) {
		n1 = n1 - 90;
		n3 = n3 - 90;
		initialTPoint();
	}
	for (int i = 0; i < 2; i++) {
		double temp;
		temp = redis(A, B, top[0], top[2], top[4], top[3]);//上
		dis = dis < temp ? dis : temp;
		temp = redis(A, B, top[2], top[0], top[5], top[3]);//中
		dis = dis < temp ? dis : temp;
		temp = redis(A, B, top[2], top[1], top[3], top[5]);//下
		dis = dis < temp ? dis : temp;
		n1 = 90 - n1;
		n3 = 450 - n3;
		initialTPoint();
	}
	return dis;
}
double cal(TPoint C, TPoint D) {
	//如果都在上面或者都在下面
	if (n2 <= 90 && n4 <= 90) {
		switch (planedis(C, D)) {
		case 0://同一面
			return redis(C, D);
		case 1://隔了一面
			return  redis1();
		case 2://隔了两面
			return redis2();
		}
	}
	else//如果在上下两面
	{
		switch (planedis(C, D)) {
		case 1://隔了一面
			return redis3();
		case 2://隔了两面
			return redis4();
		case 3://隔了三面即对面
			return redis5();
		}
	}
	return 0;
}
//整理一下点的位置
void judge() {
	if (n1 == 360)
		n1 = 0;
	if (n3 == 360)
		n3 = 0;
	while (n1 >= 90 && n3 >= 90) {
		n1 = n1 - 90;
		n3 = n3 - 90;
	}
	//如果n1大于n3,此时0<=n1<90
	if (n1 > n3) {
		int temp = n1;
		n1 = n3;
		n3 = temp;

		temp = n2;
		n2 = n4;
		n4 = temp;
	}
	//此时四八象限没有点
	if (n3 >= 270 && n3 < 360) {
		int temp = n1;
		n1 = n3 - 270;
		n3 = temp + 90;

		temp = n2;
		n2 = n4;
		n4 = temp;
	}
	//如果A在第五象限，翻转一下，此时A只能在第一象限，0<=n3<270
	if (n2 >= 90 ) {
		n2 = 180 - n2;
		n4 = 180 - n4;
	}
	//这次翻转是为了n2=90
	if (n2 >= 90 && n4 >= 90) {
		n2 = 180 - n2;
		n4 = 180 - n4;
	}
}
int main() {
	init();//初始化5个顶点
	while (scanf_s("%d%d%d%d", &n1, &n2, &n3, &n4), n1 != -1 && n2 != -1 && n3 != -1 && n4 != -1)
	{
		judge();
		initialTPoint();
		printf("Case %d: %.3lf\n", ++ca, cal(A, B));
	}
	return 0;
}
